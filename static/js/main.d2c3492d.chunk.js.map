{"version":3,"sources":["components/StocksChart.module.css","config/AppConfig.ts","store/stocksSlice.ts","components/ChartControls.tsx","components/StocksChart.tsx","utils/ErrorBoundary.tsx","App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["module","exports","AppConfig","API_KEY","API_ENDPOINT","STOCKS_TIME_SERIES","id","interval","jsonKey","name","STOCKS_TIME_SERIES_PRICES","stockTimeSeriesOptions","initialState","data","loading","timeSeries","prices","timeSeriesOpt","priceOptions","map","item","showAverage","startDate","Date","toISOString","endDate","stocksSlice","createSlice","reducers","stockDataLoading","state","stockDataLoaded","action","payload","setTimeSeriesOpt","setPriceOptions","setShowAverage","setStartDate","setEndDate","actions","selectStocksDataLoading","stocks","selectStocksData","selectTimeSeriesOpt","selectPriceOptions","selectShowAverage","selectStartDate","selectEndDate","useStyles","makeStyles","theme","createStyles","formControl","margin","spacing","minWidth","selectEmpty","marginTop","stockTimeSeriesPricesOptions","StocksChartControls","classes","dispatch","useDispatch","useState","stockSymbol","setStockSymbol","useSelector","loadStockData","sym","length","getState","a","timeSeriesItem","config","find","intervalParam","fetch","res","json","jsonRes","useEffect","Fragment","utils","DateFnsUtils","Grid","container","direction","justify","alignItems","xs","TextField","required","label","aria-label","value","onChange","e","target","FormControl","className","InputLabel","Select","labelId","event","MenuItem","key","Button","disabled","variant","color","onClick","Divider","format","date","KeyboardButtonProps","multiple","input","Input","renderValue","selected","join","Checkbox","checked","indexOf","ListItemText","primary","FormControlLabel","control","Switch","inputProps","backdrop","zIndex","drawer","fill","lineTension","borderWidth","order","configColors","average","StocksChart","chartData","setChartData","stockData","dates","Object","keys","dataPoints","entries","reverse","start","end","filter","currentDate","index","keep","isWithinInterval","splice","datasets","priceOption","borderColor","averagePrices","parseFloat","push","labels","styles","chart","Backdrop","open","CircularProgress","ErrorBoundary","props","hasError","this","children","error","React","PureComponent","App","Container","maxWidth","Paper","Boolean","window","location","hostname","match","store","configureStore","reducer","ReactDOM","render","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d2c3492d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart\":\"StocksChart_chart__-Rw-M\"};","export interface StocksTimeSeries {\r\n  id: string;\r\n  interval?: string;\r\n  jsonKey: string;\r\n  name: string;\r\n}\r\n\r\nexport interface StocksPrices {\r\n  jsonKey: string;\r\n  name: string;\r\n}\r\n\r\nexport class AppConfig {\r\n  public static API_KEY: string = 'F3G7JLZV90IVE8Z5';\r\n  public static API_ENDPOINT: string = 'https://www.alphavantage.co/query';\r\n  public static STOCKS_TIME_SERIES: StocksTimeSeries[] = [\r\n    { id: 'TIME_SERIES_INTRADAY', interval: '15min', jsonKey: 'Time Series (15min)', name: 'Intraday' },\r\n    { id: 'TIME_SERIES_DAILY', jsonKey: 'Time Series (Daily)', name: 'Daily' },\r\n    { id: 'TIME_SERIES_WEEKLY', jsonKey: 'Weekly Time Series', name: 'Weekly' },\r\n    { id: 'TIME_SERIES_MONTHLY', jsonKey: 'Monthly Time Series', name: 'Monthly' },\r\n  ];\r\n  public static STOCKS_TIME_SERIES_PRICES: StocksPrices[] = [\r\n    { jsonKey: '1. open', name: 'Open' },\r\n    { jsonKey: '2. high', name: 'High' },\r\n    { jsonKey: '3. low', name: 'Low' },\r\n    { jsonKey: '4. close', name: 'Close' },\r\n  ];\r\n}\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk, RootState } from \"./store\";\r\nimport { AppConfig, StocksTimeSeries, StocksPrices } from \"../config/AppConfig\";\r\n\r\nconst stockTimeSeriesOptions = AppConfig.STOCKS_TIME_SERIES;\r\n\r\nexport interface StocksState {\r\n  data: any;\r\n  loading: boolean;\r\n  timeSeries: StocksTimeSeries[];\r\n  prices: StocksPrices[];\r\n  timeSeriesOpt: string;\r\n  priceOptions: string[];\r\n  showAverage: boolean;\r\n  startDate: string;\r\n  endDate: string;\r\n}\r\n\r\nconst initialState: StocksState = {\r\n  data: null,\r\n  loading: false,\r\n  timeSeries: [...AppConfig.STOCKS_TIME_SERIES],\r\n  prices: [...AppConfig.STOCKS_TIME_SERIES_PRICES],\r\n  timeSeriesOpt: AppConfig.STOCKS_TIME_SERIES[1].id,\r\n  priceOptions: [...AppConfig.STOCKS_TIME_SERIES_PRICES.map(item => item.name)],\r\n  showAverage: false,\r\n  startDate: (new Date()).toISOString(),\r\n  endDate: (new Date()).toISOString()\r\n};\r\n\r\nexport const stocksSlice = createSlice({\r\n  name: \"stocks\",\r\n  initialState,\r\n  reducers: {\r\n    stockDataLoading: (state) => { state.loading = true },\r\n    stockDataLoaded: (state, action: PayloadAction<any>) => {\r\n      state.loading = false;\r\n      state.data = action.payload;\r\n    },\r\n    setTimeSeriesOpt: (state, action: PayloadAction<string>) => { state.timeSeriesOpt = action.payload },\r\n    setPriceOptions: (state, action: PayloadAction<string[]>) => { state.priceOptions = action.payload },\r\n    setShowAverage: (state, action: PayloadAction<boolean>) => { state.showAverage = action.payload },\r\n    setStartDate: (state, action: PayloadAction<string>) => { state.startDate = action.payload },\r\n    setEndDate: (state, action: PayloadAction<string>) => { state.endDate = action.payload },\r\n  },\r\n});\r\n\r\nexport const { stockDataLoading, stockDataLoaded, setTimeSeriesOpt, setPriceOptions, setShowAverage, setStartDate, setEndDate } = stocksSlice.actions;\r\n\r\nexport const getStocksData = (sym: string): AppThunk => async (dispatch, getState) => {\r\n  const timeSeriesItem = getState().stocks.timeSeriesOpt;\r\n  const config = stockTimeSeriesOptions.find((item) => item.id === timeSeriesItem);\r\n  if (!config) return;\r\n\r\n  dispatch(stockDataLoading());\r\n\r\n  const intervalParam = timeSeriesItem === stockTimeSeriesOptions[0].id ? `&interval=${config.interval}` : '';\r\n  const res = await fetch(`${AppConfig.API_ENDPOINT}?function=${timeSeriesItem}&symbol=${sym}${intervalParam}&apikey=${AppConfig.API_KEY}`);\r\n  const jsonRes = await res.json();\r\n  const jsonKey = config.jsonKey;\r\n\r\n  dispatch(stockDataLoaded(jsonRes[jsonKey as keyof any]));\r\n}\r\n\r\nexport const selectStocksDataLoading = (state: RootState) => state.stocks.loading;\r\nexport const selectStocksData = (state: RootState) => state.stocks.data;\r\nexport const selectTimeSeriesOpt = (state: RootState) => state.stocks.timeSeriesOpt;\r\nexport const selectPriceOptions = (state: RootState) => state.stocks.priceOptions;\r\nexport const selectShowAverage = (state: RootState) => state.stocks.showAverage;\r\nexport const selectStartDate = (state: RootState) => state.stocks.startDate;\r\nexport const selectEndDate = (state: RootState) => state.stocks.endDate;\r\n\r\nexport default stocksSlice.reducer;\r\n","import DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  createStyles,\r\n  FormControl,\r\n  FormControlLabel,\r\n  Grid,\r\n  Input,\r\n  InputLabel,\r\n  ListItemText,\r\n  MenuItem,\r\n  Select,\r\n  Switch,\r\n  TextField,\r\n  Theme,\r\n  Divider,\r\n} from '@material-ui/core';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n  KeyboardDatePicker,\r\n  MuiPickersUtilsProvider,\r\n} from '@material-ui/pickers';\r\nimport React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppConfig} from '../config/AppConfig';\r\nimport {\r\n  getStocksData,\r\n  selectEndDate,\r\n  selectPriceOptions,\r\n  selectShowAverage,\r\n  selectStartDate,\r\n  selectTimeSeriesOpt,\r\n  setEndDate,\r\n  setPriceOptions,\r\n  setShowAverage,\r\n  setStartDate,\r\n  setTimeSeriesOpt,\r\n} from '../store/stocksSlice';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 100,\r\n    },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  })\r\n);\r\n\r\nconst stockTimeSeriesOptions = AppConfig.STOCKS_TIME_SERIES;\r\nconst stockTimeSeriesPricesOptions = AppConfig.STOCKS_TIME_SERIES_PRICES;\r\n\r\nexport default function StocksChartControls() {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [stockSymbol, setStockSymbol] = useState('IBM');\r\n  const timeSeriesOpt: string = useSelector(selectTimeSeriesOpt);\r\n  const priceOptions: string[] = useSelector(selectPriceOptions);\r\n  const showAverage: boolean = useSelector(selectShowAverage);\r\n  const startDate: string = useSelector(selectStartDate);\r\n  const endDate: string = useSelector(selectEndDate);\r\n\r\n  const handleTimeSeriesChange = (event: any) =>\r\n    dispatch(setTimeSeriesOpt(event.target.value));\r\n\r\n  const handleStartDateChange = (date: any) =>\r\n    dispatch(setStartDate(date.toISOString()));\r\n\r\n  const handleEndDateChange = (date: any) =>\r\n    dispatch(setEndDate(date.toISOString()));\r\n\r\n  const handlePriceOptionChange = (event: any) =>\r\n    dispatch(setPriceOptions(event.target.value));\r\n\r\n  const handleAverageToggleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => dispatch(setShowAverage(event.target.checked));\r\n\r\n  const getName = (id: string): string =>\r\n    (stockTimeSeriesOptions.find((item) => item.id === id) || {name: ''}).name;\r\n\r\n  const loadStockData = () => {\r\n    stockSymbol.length > 0 && dispatch(getStocksData(stockSymbol));\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadStockData();\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <Grid container direction=\"column\">\r\n          <Grid\r\n            container\r\n            item\r\n            justify=\"space-around\"\r\n            alignItems=\"center\"\r\n            xs={6}\r\n          >\r\n            <Grid item xs={1}>\r\n              <TextField\r\n                required={true}\r\n                id=\"standard-basic\"\r\n                label=\"Symbol\"\r\n                aria-label=\"Symbol\"\r\n                value={stockSymbol}\r\n                onChange={(e) => setStockSymbol(e.target.value)}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={1}>\r\n              <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">\r\n                  Time Series\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-simple-select-label\"\r\n                  id=\"demo-simple-select\"\r\n                  value={timeSeriesOpt}\r\n                  onChange={handleTimeSeriesChange}\r\n                >\r\n                  {stockTimeSeriesOptions.map((item) => (\r\n                    <MenuItem key={item.id} value={item.id}>\r\n                      {getName(item.id)}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={3}>\r\n              <Button\r\n                disabled={stockSymbol.length === 0}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={loadStockData}\r\n              >\r\n                See stock info\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider />\r\n          <Grid container item justify=\"space-evenly\" alignItems=\"center\">\r\n            <Grid item xs={2}>\r\n              {' '}\r\n              <h2>Change view</h2>\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              <KeyboardDatePicker\r\n                disabled={timeSeriesOpt === 'TIME_SERIES_INTRADAY'}\r\n                margin=\"normal\"\r\n                id=\"date-picker-dialog-start\"\r\n                label=\"Start Date\"\r\n                format=\"MM/dd/yyyy\"\r\n                value={startDate}\r\n                onChange={handleStartDateChange}\r\n                KeyboardButtonProps={{\r\n                  'aria-label': 'Change Start date',\r\n                }}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={2}>\r\n              <KeyboardDatePicker\r\n                disabled={timeSeriesOpt === 'TIME_SERIES_INTRADAY'}\r\n                margin=\"normal\"\r\n                id=\"date-picker-dialog-end\"\r\n                label=\"End Date\"\r\n                format=\"MM/dd/yyyy\"\r\n                value={endDate}\r\n                onChange={handleEndDateChange}\r\n                KeyboardButtonProps={{\r\n                  'aria-label': 'Change end date',\r\n                }}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={2}>\r\n              <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"price-options-label\">Prices</InputLabel>\r\n                <Select\r\n                  labelId=\"price-options-label\"\r\n                  id=\"price-options\"\r\n                  multiple\r\n                  value={priceOptions}\r\n                  onChange={handlePriceOptionChange}\r\n                  input={<Input />}\r\n                  renderValue={(selected) => (selected as string[]).join(', ')}\r\n                >\r\n                  {stockTimeSeriesPricesOptions.map((item) => (\r\n                    <MenuItem key={item.name} value={item.name}>\r\n                      <Checkbox\r\n                        checked={priceOptions.indexOf(item.name) !== -1}\r\n                      />\r\n                      <ListItemText primary={item.name} />\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={1}>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={showAverage}\r\n                    onChange={handleAverageToggleChange}\r\n                    color=\"primary\"\r\n                    name=\"Average\"\r\n                    inputProps={{'aria-label': 'primary checkbox'}}\r\n                  />\r\n                }\r\n                label=\"Average\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </MuiPickersUtilsProvider>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import {\r\n  Backdrop,\r\n  CircularProgress,\r\n  createStyles,\r\n  makeStyles,\r\n  Theme,\r\n} from '@material-ui/core';\r\nimport {isWithinInterval} from 'date-fns';\r\nimport React, {useEffect, useState} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppConfig} from '../config/AppConfig';\r\nimport {\r\n  selectEndDate,\r\n  selectPriceOptions,\r\n  selectShowAverage,\r\n  selectStartDate,\r\n  selectStocksData,\r\n  selectStocksDataLoading,\r\n  selectTimeSeriesOpt,\r\n} from '../store/stocksSlice';\r\nimport styles from './StocksChart.module.css';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    backdrop: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      color: '#fff',\r\n    },\r\n  })\r\n);\r\n\r\nconst stockTimeSeriesPricesOptions = AppConfig.STOCKS_TIME_SERIES_PRICES;\r\nconst config = {fill: false, lineTension: 0, borderWidth: 1, order: 0};\r\nconst configColors = {\r\n  '1. open': 'rgb(197, 216, 109)',\r\n  '2. high': 'rgb(38, 28, 21)',\r\n  '3. low': 'rgb(145, 151, 174)',\r\n  '4. close': 'rgb(215, 214, 214)',\r\n  average: 'rgb(240, 93, 35)',\r\n};\r\n\r\nconst getKey = (name: string) =>\r\n  (\r\n    stockTimeSeriesPricesOptions.find((item) => item.name === name) || {\r\n      jsonKey: '',\r\n    }\r\n  ).jsonKey;\r\n\r\nfunction StocksChart() {\r\n  const classes = useStyles();\r\n  const [chartData, setChartData] = useState({});\r\n  const stockDataLoading: any = useSelector(selectStocksDataLoading);\r\n  const stockData: any = useSelector(selectStocksData);\r\n  const timeSeriesOpt: string = useSelector(selectTimeSeriesOpt);\r\n  const priceOptions: string[] = useSelector(selectPriceOptions);\r\n  const showAverage: boolean = useSelector(selectShowAverage);\r\n  const startDate: string = useSelector(selectStartDate);\r\n  const endDate: string = useSelector(selectEndDate);\r\n\r\n  useEffect(() => {\r\n    if (!stockData) return;\r\n\r\n    let dates = Object.keys(stockData);\r\n    let dataPoints = Object.entries(stockData);\r\n\r\n    dates.reverse();\r\n    dataPoints.reverse();\r\n\r\n    if (\r\n      timeSeriesOpt !== 'TIME_SERIES_INTRADAY' &&\r\n      startDate &&\r\n      endDate &&\r\n      startDate !== endDate\r\n    ) {\r\n      const interval = {\r\n        start: new Date(startDate),\r\n        end: new Date(endDate),\r\n      };\r\n\r\n      dates = dates.filter((currentDate, index) => {\r\n        const keep = isWithinInterval(new Date(currentDate), interval);\r\n\r\n        !keep && dataPoints.splice(index, 1);\r\n\r\n        return keep;\r\n      });\r\n    }\r\n\r\n    const datasets = priceOptions.map((priceOption, index) => {\r\n      const jsonKey = getKey(priceOption);\r\n\r\n      return {\r\n        ...config,\r\n        label: priceOption,\r\n        borderColor: configColors[jsonKey as keyof Object],\r\n        order: index,\r\n        data: dataPoints.map((item: any[]) => item[1][jsonKey]),\r\n      };\r\n    });\r\n\r\n    if (showAverage) {\r\n      const averagePrices = dataPoints.map(\r\n        (item: any[]) =>\r\n          (parseFloat(item[1]['3. low']) + parseFloat(item[1]['2. high'])) / 2\r\n      );\r\n      datasets.push({\r\n        ...config,\r\n        label: 'Average',\r\n        borderColor: configColors['average' as keyof Object],\r\n        borderWidth: 3,\r\n        order: 5,\r\n        data: averagePrices,\r\n      });\r\n    }\r\n\r\n    setChartData({\r\n      labels: dates,\r\n      datasets,\r\n    });\r\n  }, [stockData, startDate, endDate, timeSeriesOpt, priceOptions, showAverage]);\r\n  return (\r\n    <div className={styles.chart}>\r\n      <Backdrop className={classes.backdrop} open={stockDataLoading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Line data={chartData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StocksChart;\r\n","import React from \"react\";\r\n\r\ninterface ErrorBoundaryState {\r\n  hasError: boolean;\r\n}\r\n\r\nclass ErrorBoundary extends React.PureComponent<any, ErrorBoundaryState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error: any) {\r\n    return { hasError: true };\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Something went wrong.</h1>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport React from 'react';\r\nimport StocksChartControls from './components/ChartControls';\r\nimport StocksChart from './components/StocksChart';\r\nimport ErrorBoundary from './utils/ErrorBoundary';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Container maxWidth=\"lg\">\r\n        <Paper>\r\n          <ErrorBoundary>\r\n            <StocksChartControls />\r\n          </ErrorBoundary>\r\n        </Paper>\r\n        <ErrorBoundary>\r\n          <StocksChart />\r\n        </ErrorBoundary>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport reducer from \"./stocksSlice\";\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    stocks: reducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport {Provider} from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from './store/store';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <CssBaseline>\r\n      <App />\r\n    </CssBaseline>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}